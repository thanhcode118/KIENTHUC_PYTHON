# -*- coding: utf-8 -*-
"""052205001149_NGUYEN_HA_THANH.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bh8Yg5MulnhGKVOHooKXNH_oKHtYk0hE
"""

s1=str()
s2=str("Welcome")

s="Programming"
print(s[0])
print(s[1])
print(len(s))
print(s[len(s)-1])

print(s[-len(s)])
print(s[-1])

"""****Cú pháp cắt String:****

s[start : end : step]

• Kết quả trả về String con từ index start đến index end – 1.

• Start, end, step có thể vắng.
• Mặc định: start = 0, end = len(s), step = 1

"""

print(s[1:4])
print(s[:4])
print(s[4:])
print(s[1:-1])
print(s[3:1])

s=s[:3] + "X" + s[4:]
print(s)

"""****Duyệt Strings****

Một String có thể lặp được → có thể sử dụng vòng lặp để duyệt

tuần tự các ký tự trong String.
"""

s="Programming"
for ch in s:
  print(ch, end="-")

for i in range(1,len(s),2):
  print(s[i],end="-")

"""****Các toán tử trên String****

• + : nối 2 String

• * : lặp lại String n lần

• in và not in: kiểm tra một String có nằm trong một String khác
hay không
"""

s1= "Welcome"
s2= "Python"
s=s1+ " to " + s2
print(s)

s=input("Enter a string:")
if "Python" in s:
  print("Python is in",s)
else:
  print("Python is not in",s)

"""**** So sánh Strings****

• Sử dụng các toán tử so sánh: ==,!=, >, >=, <,<=

• Python so sánh lần lượt các ký tự tương ứng ở 2 chuỗi
"""

s1="apple"
s2="avocado"
print(s1 == s2)
print(s1<s2)
print(s1<=s2)

"""****Hàm built-in****

• ord(ch): trả về mã ASCII của ký tự ch.

• chr(code): trả về ký tương ứng với code

"""

print(ord("A"))
print(chr(98))

offset=ord("a")-ord("A")
print(offset)
lower="z"
upper= chr(ord(lower)-offset)
print(upper)

"""****Chuyển kiểu****

• s.lower(): trả về bản sao của chuỗi ở dạng chữ thường

• s.upper(): trả về bản sao của chuỗi ở dạng chữ in hoa

• s.capitalize(): trả về bản sao của chuỗi với ký tự đầu tiên được chuyển
sang in hoa

• s.title(): trả về bản sao của chuỗi với ký tự đầu tiên của mỗi từ được
chuyển sang in hoa

• s.swapcase(): trả về bản sao của chuỗi với ký tự in thường chuyển sang
in hoa và ngược lại

• s.strip([<char>]): cắt bỏ những ký tự char ở đầu và cuối của
chuỗi

• Mặc định, char = None --> ký tự cách trắng sẽ bị cắt bỏ
"""

s1="Welcome to Programming"
print(s1.lower())
print(s1.upper())
print(s1.swapcase())

s="***10***"
s.strip("*")

"""****Tìm kiếm và thay thế****

• s.count(sub[,start[,end]]): đếm số lần xuất hiện chuỗi con trong
chuỗi s

• s.endswith(suffix[,start[,end]]): trả về True nếu chuỗi kết thúc với
hậu tố suffix.

• s.startswith(prefix[,start[,end]]): trả về True nếu chuỗi bắt đầu với
tiền tố prefix.
"""

s= "Welcome to Python"
print(s.count("o"))
print(s.count("o",7))
print(s.endswith("thon"))
print(s.startswith("good"))

"""****Tìm kiếm và thay thế****

• s.find(sub[,start[,end]]): trả về vị trí đầu tiên chuỗi con xuất hiện
trong s, ngược lại trả về -1

• s.replace(old, new): Trả về chuỗi mới thay thế vị trí chuỗi con old
bằng chuỗi con new
"""

print(s.find("come"))
print(s.find("become"))

s1=s.replace("Python","Java")
print(s1)

"""****Kiểm tra loại ký tự****

• s.isalnum(): trả về True nếu s khác rỗng và tất cả các ký tự của nó là
chữ cái hoặc chữ số

• s.isalpha(): trả về True nếu s khác rỗng và tất cả các ký tự của nó là
chữ cái

• s.isdigit(): trả về True nếu s khác rỗng và tất cả các ký tự của nó là
chữ số

"""

s="python3"
print(s.isalnum())
s="abc"
print(s.isalpha())
s="2019"
print(s.isdigit())

"""****Kiểm tra loại ký tự****

• s.islower(): trả về True nếu s khác rỗng và tất cả các ký tự của nó
đều là chữ thường

• s.isupper(): trả về True nếu s khác rỗng và tất cả các ký tự của nó
đều là chữ in hoa
"""

s="Hello"
print(s.islower())
print(s.isupper())

"""****Tách chuỗi****

• s.split(sep=None, maxsplit=-1): tách chuỗi s thành danh sách các
chuỗi con

• Sep: ký tự dùng để tách chuỗi, mặc định là None (whitespace)

• Maxsplit: số lần tách tối đa, mặc định là -1 (không giới hạns)
"""

s="This is split function"
items=s.split()
print(items)

date="20/11/2011"
items_1=date.split(sep='/')
print(items_1)
items_2=date.split(sep='/',maxsplit=1 )
print(items_2)